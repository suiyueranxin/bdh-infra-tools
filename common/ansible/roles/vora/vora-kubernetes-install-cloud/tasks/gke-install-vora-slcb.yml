---
- include: common-setup-password.yml

# resume block
- block:
  - name: Get backup bucket
    shell: echo {{ di_backup_name }} | awk -F '/' '{print $1}'
    register: backup_bucket

  - name: Get backup name
    shell: echo {{ di_backup_name }} | awk -F '/' '{print $2}'
    register: backup_name

  - name: Get backup timestamp
    shell: echo {{ di_backup_name }} | awk -F '/' '{print $3}'
    register: backup_timestamp
      
  - name: Get backup date
    shell: date -d "@{{ backup_timestamp.stdout }}" +"%Y-%m-%d %H:%M:%S %:z"
    register: backup_date

  when: enable_restore is defined and enable_restore == "true"
  environment:
    KUBECONFIG: "{{ gke_k8s_cluster_kubeconfig }}"
  tags:
    - install

- name: set_fact slcb_init = true
  set_fact:
    slcb_init: "true"
  tags:
    - install
    - update
- name: generate inifile for slcb init
  include: generate-inifile.yml
  tags:
    - install
    - update

- name: Set SAP Docker private repository
  set_fact:
    docker_repository_flag: "--SAP_PV_DOCKER_REPO {{ docker_artifactory }}"
  tags:
  - install
  - update

- name: Set SAP Docker repository to use default
  set_fact:
    docker_repository_flag: ""
  when: docker_artifactory is undefined or docker_artifactory == ""
  tags:
  - install
  - update

- name: download slcb
  include: download-slcb.yml
  tags:
  - install
  - update

- name: execute docker login
  shell: "docker login -u _json_key --password-stdin https://{{ gke_docker_registry_name }} < {{ google_application_credentials }}"
  environment:
    "{{ installer_env }}"
  args:
    chdir: "{{ installer_workspace }}"
    executable: /bin/bash
  tags:
    - install
    - update

- name: Set product bridge flag 
  set_fact:
    product_bridge_flag: "--useBridgeImage {{product_bridge_name}}:{{ vorapkg_version }}"
  tags:
  - install
  - update

- name: workaround step for SLCB 1.1.44+
  shell: "./slcb copy {{ docker_repository_flag }} -i {{ installer_workspace }}/inifile {{ product_bridge_flag }} -u none 2>&1 | tee slcb_copy_workaround.log; exit ${PIPESTATUS[0]}"
  environment:
    "{{ installer_env }}"
  args:
    chdir: "{{ installer_workspace }}"
    executable: /bin/bash
  register: slcb_copy_workaround_result
  until: slcb_copy_workaround_result.rc == 0
  retries: 3
  delay: 60
  ignore_errors: true
  tags:
    - install
    - update

- block:
  - name: slcb init
    # workaround for SLCB 1.1.44
    #shell: "./slcb init -i {{ installer_workspace }}/inifile --namespace {{ slc_ns }} {{ docker_repository_flag }} -u none 2>&1 | tee slcb_init_process.log; exit ${PIPESTATUS[0]}"
    shell: "./slcb init -i {{ installer_workspace }}/inifile --namespace {{ slc_ns }} -u none 2>&1 | tee slcb_init_process.log; exit ${PIPESTATUS[0]}"
    environment:
      "{{ installer_env }}"
    args:
      chdir: "{{ installer_workspace }}"
      executable: /bin/bash
    ignore_errors: true
    register: installation_result_via_slcb
    until: installation_result_via_slcb.rc == 0
    retries: 3 # workaround the first slcb init failure
    delay: 5
    tags:
      - install
      - update

  - name: dump slcb.log
    shell: "cat {{ installer_workspace }}/slcb.log"
    environment:
      "{{ installer_env }}"
    args:
      chdir: "{{ installer_workspace }}"
      executable: /bin/bash
    tags:
      - install
      - update

  - name: Fail if init failed
    assert: { that: "installation_result_via_slcb.rc == 0 and installation_result_via_slcb.changed == true" }
    tags:
      - install
      - update

  - name: slcb mirror
    shell: "./slcb copy -l debug -i inifile {{ docker_repository_flag }} {{ product_bridge_flag }} -u none 2>&1 | tee slcb_copy_process.log; exit ${PIPESTATUS[0]}"
    environment:
      "{{ installer_env }}"
    args:
      chdir: "{{ installer_workspace }}"
      executable: /bin/bash
    register: slcb_copy_result
    until: slcb_copy_result.rc == 0
    retries: 3
    delay: 60
    tags:
      - install
      - update

  - name: set_fact slcb_init = false
    set_fact:
      slcb_init: "false"
    tags:
      - install
      - update
  - name: generate inifile for slcb execute
    include: generate-inifile.yml
    tags:
      - install
      - update

  - name: install the vora via slcb
    shell: "./slcb execute -i inifile --namespace {{ slc_ns }} {{ docker_repository_flag }} --streamBridgeLog {{ product_bridge_flag }} -u none 2>&1 | tee slcb_execute_process.log; exit ${PIPESTATUS[0]}"
    environment:
      "{{ installer_env }}"
    args:
      chdir: "{{ installer_workspace }}"
      executable: /bin/bash
    ignore_errors: true
    register: installation_result_via_slcb
    tags:
      - install
      - update
    #no_log: true

  - block:
    - name: Create pods logs directory
      file: path="{{ installer_workspace }}/logs/podlogs" state=directory
    - name: Collect current logs
      shell: "python {{role_path}}/files/log_collector.py {{ installer_workspace }}/logs/podlogs --namespace {{ vora_kube_namespace }}"
      environment:
        "{{ installer_env }}"
    ignore_errors: true
    tags:
      - install
      - update
  - block:
    - name: Create pods describe logs directory
      file:
        path: "{{ installer_workspace }}/logs/pod_des_logs"
        state: directory
    - name: save all pod describe log
      shell: "python {{role_path}}/../vora-kubernetes-install/files/generate_pods_describe_log.py {{ vora_kube_namespace }} {{ installer_workspace }}/logs/pod_des_logs"
      environment:
          "{{ installer_env }}"
    ignore_errors: true
    tags:
      - install
      - update

  - name: copy slcb log files to playbook folder
    shell: "cp {{ installer_workspace }}/slcb*.log ./"
    args:
      executable: /bin/bash
    ignore_errors: true
    tags:
      - install
      - update

  - name: archive the slcb logs folder
    archive:
      path: "{{ installer_workspace }}/slcb.log"
      dest: "{{ installer_workspace }}/{{ slcb_log }}"
      format: zip
    ignore_errors: true
    tags:
      - install
      - update

  - name: copy slcb log zip to playbook folder
    fetch:
      src: "{{ installer_workspace }}/{{ slcb_log }}"
      dest: "{{ slcb_log }}"
      flat: yes
    tags:
      - install
      - update
  when: slcb_copy_workaround_result.rc == 0

- name: archive the logs folder
  archive:
    path: "{{ installer_workspace }}/logs"
    dest: "{{ installer_workspace }}/{{ archive_logs }}"
    format: zip
  ignore_errors: true
  tags:
    - install
    - update
  
- name: copy logs to playbook folder
  fetch:
    src: "{{ installer_workspace }}/{{ archive_logs }}"
    dest: "{{ archive_logs }}"
    flat: yes
  ignore_errors: true
  tags:
    - install
    - update

- name: Fail if installation via slcb failed
  assert: { that: "installation_result_via_slcb.rc == 0 and installation_result_via_slcb.changed == true" }
  tags:
    - install
    - update

# install with enabled backup block	
- name: Set backup path prefix
  set_fact:
    di_backup_path_prefix: "{{ gke_bucket_name }}"
  when: enable_backup is defined and enable_backup == "true"
  tags:
    - install